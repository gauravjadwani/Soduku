{"version":3,"sources":["utilities/constants.ts","utilities/helper.ts","components/Table.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TEST_STRING","CHANCES","getRandomInt","max","Math","floor","random","randomise","frequency","matrix","Array","fill","map","i","row","coloumn","value","sodukuState","status","insertedIndexRow","insertedIndexColoumn","initialIndex","getInitialIndex","startingIndexRow","startingIndexColoumn","statusSmallerGrid","checkSmallerGrid","Object","objectSpread","completed","statusCheckRow","checkRowOrColoumnStatus","statusCheckColoumn","searchMatrix","len","len1","piviot","arguments","length","undefined","searchValue","obj","getSodukuTime","startTime","difference","Date","getTime","hours","minutes","seconds","element","CustomTable","props","_this","_this2","this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","startTimer","st","t","setState","time","componentDidMount","tInterval","setInterval","handleChange","e","str","newValue","target","test","isNaN","parseInt","indexes","split","newState","toConsumableArray","state","error","sodukuStatusObject","postions","clearInterval","renderColoums","singleRowObject","_loop","j","customClass","concat","rowcouloumn","push","react_default","a","createElement","data-position","className","type","onChange","onKeyDown","readOnly","chancesRemaining","Fragment","renderTableComponent","component","message","keyCode","React","Component","App","Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14fd9a15.chunk.js","sourcesContent":["export const TEST_STRING: RegExp = /^[0-8]+$/;\nexport const CHANCES: number = 3;\n","interface InitialIndexObject {\n  row: number;\n  coloumn: number;\n}\nexport const getRandomInt = (max: number): number => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\nexport const randomise = (frequency: number): any[][] => {\n  const matrix = new Array(9).fill(0).map(() => {\n    return new Array(9).fill('');\n  });\n  for (let i = 1; i <= frequency; i++) {\n    const row = getRandomInt(8);\n    const coloumn = getRandomInt(8);\n    const value = getRandomInt(8);\n    matrix[row][coloumn] = value;\n    const checkState: any = sodukuState(matrix, row, coloumn);\n    if (checkState.status === false) {\n      if (matrix[row][coloumn] !== '') {\n        matrix[row][coloumn] = '';\n      }\n    }\n  }\n  return matrix;\n};\n\nexport const sodukuState = (\n  matrix: number[][],\n  insertedIndexRow: number,\n  insertedIndexColoumn: number,\n): any => {\n  const value: number = matrix[insertedIndexRow][insertedIndexColoumn];\n  const initialIndex: InitialIndexObject = getInitialIndex(\n    insertedIndexRow,\n    insertedIndexColoumn,\n  );\n  const startingIndexRow: number = initialIndex.row;\n  const startingIndexColoumn: number = initialIndex.coloumn;\n  const statusSmallerGrid: any = checkSmallerGrid(\n    matrix,\n    startingIndexRow,\n    startingIndexColoumn,\n    value,\n    insertedIndexRow,\n    insertedIndexColoumn,\n  );\n  if (statusSmallerGrid.status === false) {\n    return { ...statusSmallerGrid, completed: false };\n  }\n  const statusCheckRow: any = checkRowOrColoumnStatus(\n    matrix,\n    'row',\n    value,\n    insertedIndexRow,\n    insertedIndexColoumn,\n  );\n  if (statusCheckRow.status === false) {\n    return { ...statusCheckRow, completed: false };\n  }\n  const statusCheckColoumn: any = checkRowOrColoumnStatus(\n    matrix,\n    'coloumn',\n    value,\n    insertedIndexRow,\n    insertedIndexColoumn,\n  );\n\n  if (statusCheckColoumn.status === false) {\n    return { ...statusCheckColoumn, completed: false };\n  } else {\n    const statusSearchMatrix: any = searchMatrix(matrix, '');\n    if (statusSearchMatrix.status === false) {\n      return { status: true, completed: true };\n    }\n    return { status: true, completed: false };\n  }\n};\nexport const checkSmallerGrid = (\n  matrix: number[][],\n  startingIndexRow: number,\n  startingIndexColoumn: number,\n  value: number,\n  insertedIndexRow: number,\n  insertedIndexColoumn: number,\n) => {\n  const len: number = startingIndexRow + 3;\n  const len1: number = startingIndexColoumn + 3;\n\n  let status: boolean = true;\n  for (let row = startingIndexRow; row < len; row++) {\n    for (let coloumn = startingIndexColoumn; coloumn < len1; coloumn++) {\n      if (row === insertedIndexRow && coloumn === insertedIndexColoumn) {\n        continue;\n      } else if (value === matrix[row][coloumn]) {\n        status = false;\n        return { status, row, coloumn };\n      }\n    }\n  }\n  return { status };\n};\n\nexport const getInitialIndex = (\n  insertedIndexRow: number,\n  insertedIndexColoumn: number,\n): InitialIndexObject => {\n  let initialIndex: InitialIndexObject;\n  if (insertedIndexRow < 3) {\n    if (insertedIndexColoumn < 3) {\n      initialIndex = { row: 0, coloumn: 0 };\n    } else if (insertedIndexColoumn > 2 && insertedIndexColoumn < 6) {\n      initialIndex = { row: 0, coloumn: 3 };\n    } else {\n      initialIndex = { row: 0, coloumn: 6 };\n    }\n  } else if (insertedIndexRow > 2 && insertedIndexRow < 6) {\n    if (insertedIndexColoumn < 3) {\n      initialIndex = { row: 3, coloumn: 0 };\n    } else if (insertedIndexColoumn > 2 && insertedIndexColoumn < 6) {\n      initialIndex = { row: 3, coloumn: 3 };\n    } else {\n      initialIndex = { row: 3, coloumn: 6 };\n    }\n  } else {\n    if (insertedIndexColoumn < 3) {\n      initialIndex = { row: 6, coloumn: 0 };\n    } else if (insertedIndexColoumn > 2 && insertedIndexColoumn < 6) {\n      initialIndex = { row: 6, coloumn: 3 };\n    } else {\n      initialIndex = { row: 6, coloumn: 6 };\n    }\n  }\n  return initialIndex;\n};\nexport const checkRowOrColoumnStatus = (\n  matrix: number[][],\n  piviot: string = 'row',\n  searchValue: number,\n  insertedIndexRow: number,\n  insertedIndexColoumn: number,\n): any => {\n  let status: boolean = true;\n  for (let i = 0; i < matrix.length; i++) {\n    let value: any;\n    if (piviot === 'row') {\n      if (i === insertedIndexColoumn) {\n        continue;\n      }\n      value = matrix[insertedIndexRow][i];\n    } else {\n      if (i === insertedIndexRow) {\n        continue;\n      }\n      value = matrix[i][insertedIndexColoumn];\n    }\n    if (searchValue === value) {\n      status = false;\n      if (piviot === 'row') {\n        const obj = { row: insertedIndexRow, coloumn: i };\n        return { status, ...obj };\n      } else {\n        const obj = { row: i, coloumn: insertedIndexColoumn };\n        return { status, ...obj };\n      }\n    }\n  }\n  return { status };\n};\n// sodukuState([[1, 2], [2, 8]]);\nexport const getSodukuTime = (startTime: number): string => {\n  let updatedTime: number;\n  let difference: number;\n  updatedTime = new Date().getTime();\n  difference = updatedTime - startTime;\n  let hours: any = Math.floor(\n    (difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),\n  );\n  let minutes: any = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n  let seconds: any = Math.floor((difference % (1000 * 60)) / 1000);\n  hours = hours < 10 ? '0' + hours : hours;\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  seconds = seconds < 10 ? '0' + seconds : seconds;\n  const displayTime: string = hours + ':' + minutes + ':' + seconds;\n  return displayTime;\n};\nexport const searchMatrix = (matrix: number[][], element: any) => {\n  let status: boolean = false;\n  // tslint:disable-next-line:prefer-for-of\n  for (let row: number = 0; row < matrix.length; row++) {\n    // tslint:disable-next-line:prefer-for-of\n    for (let coloumn: number = 0; coloumn < matrix[row].length; coloumn++) {\n      if (matrix[row][coloumn] === element) {\n        status = true;\n        return status;\n      }\n    }\n  }\n  return status;\n};\n","import React from 'react';\nimport { CHANCES, TEST_STRING } from './../utilities/constants';\nimport { getSodukuTime, randomise, sodukuState } from './../utilities/helper';\n\nclass CustomTable extends React.Component<\n  any,\n  {\n    value: any[][];\n    error: string;\n    time: string;\n    message: string;\n    chancesRemaining: number;\n    tInterval: number;\n  }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      chancesRemaining: CHANCES,\n      error: '',\n      message: 'playing',\n      tInterval: 0,\n      time: '00:00:00',\n      value: randomise(40),\n    };\n  }\n  public startTimer = (st: number) => {\n    const t: string = getSodukuTime(st);\n    this.setState({ time: t });\n  };\n  public componentDidMount = () => {\n    const startTime: number = new Date().getTime();\n    const tInterval: any = setInterval(() => this.startTimer(startTime), 1000);\n    this.setState({ tInterval });\n  };\n  public onKeyDown(e: any) {\n    if (e.keyCode === 8 && this.state.chancesRemaining >= 0) {\n      const chancesRemaining: number = this.state.chancesRemaining - 1;\n      if (this.state.error !== '') {\n        if (chancesRemaining < 0) {\n          this.setState({ message: 'Game Over' });\n          clearInterval(this.state.tInterval);\n        }\n        this.setState({ chancesRemaining });\n      }\n    }\n  }\n  public handleChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    str: string,\n  ) => {\n    const newValue: string = e.target.value;\n    if (\n      newValue === '' ||\n      (TEST_STRING.test(newValue) &&\n        newValue.length === 1 &&\n        !isNaN(parseInt(newValue, 10)))\n    ) {\n      const indexes = str.split('');\n      const newState = [...this.state.value];\n      const row = parseInt(indexes[0], 10);\n      const coloumn = parseInt(indexes[1], 10);\n      newState[row][coloumn] =\n        newValue !== '' ? parseInt(e.target.value, 10) : '';\n      this.setState({ value: newState });\n      if (newValue === '') {\n        this.setState({ error: '' });\n        return false;\n      }\n      const sodukuStatusObject: any = sodukuState(newState, row, coloumn);\n      if (sodukuStatusObject.status === false) {\n        const postions =\n          sodukuStatusObject.row + '' + sodukuStatusObject.coloumn;\n        this.setState({ error: postions });\n      } else if (\n        sodukuStatusObject.status === false &&\n        sodukuStatusObject.completed === true\n      ) {\n        this.setState({ error: '' });\n        clearInterval(this.state.tInterval);\n      } else {\n        this.setState({ error: '' });\n      }\n    } else {\n      return false;\n    }\n  };\n  public renderColoums = (props: any) => {\n    const singleRowObject: any[] = [];\n    for (let j = 0; j < 9; j++) {\n      const str: string = props.i + '' + j;\n      const value: number = this.state.value[props.i][j];\n      // const customClass: string = 'Row-' + props.i + ' ' + 'Coloumn-' + j;\n      const customClass: string = `Row-${props.i}${' '}Coloumn-${j}`;\n      const error: string = this.state.error;\n      const rowcouloumn = error.split('');\n      const row = parseInt(rowcouloumn[0], 10);\n      const coloumn = parseInt(rowcouloumn[1], 10);\n      singleRowObject.push(\n        <div data-position={str} className={customClass}>\n          <input\n            type=\"string\"\n            onChange={e => this.handleChange(e, str)}\n            onKeyDown={e => this.onKeyDown(e)}\n            value={value}\n            className={row === props.i && coloumn === j ? 'Red' : ''}\n            readOnly={this.state.chancesRemaining >= 0 ? false : true}\n          />\n        </div>,\n      );\n    }\n    return <React.Fragment>{singleRowObject}</React.Fragment>;\n  };\n  public renderTableComponent = (): any => {\n    const component: any[] = [];\n    for (let i = 0; i < 9; i++) {\n      const row = [];\n      row.push(\n        <div className=\"FlexColoumnContainer\">\n          <this.renderColoums i={i} />\n        </div>,\n      );\n      component.push(row);\n    }\n    return (\n      <React.Fragment>\n        <span className=\"sp\">{component}</span>\n      </React.Fragment>\n    );\n  };\n  public render() {\n    return (\n      <div>\n        <div className=\"MainContainer\">\n          <this.renderTableComponent />\n        </div>\n        <div>TIme : {this.state.time}</div>\n        <div>\n          Chances remaining :{' '}\n          {this.state.chancesRemaining >= 0 ? this.state.chancesRemaining : 0}\n        </div>\n        <div>Status : {this.state.message}</div>\n      </div>\n    );\n  }\n}\nexport default CustomTable;\n","import React from 'react';\nimport './App.css';\n\nimport CustomTable from './components/Table';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <CustomTable />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}