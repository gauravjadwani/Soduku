{"version":3,"sources":["utilities/constants.ts","utilities/helper.ts","components/Table.tsx","App.tsx","index.tsx"],"names":["TEST_STRING","getRandomInt","max","Math","floor","random","randomise","frequency","matrix","Array","fill","map","i","row","coloumn","value","sodukuState","status","insertedIndexRow","insertedIndexColoumn","initialIndex","getInitialIndex","startingIndexRow","startingIndexColoumn","statusSmallerGrid","checkSmallerGrid","completed","statusCheckRow","checkRowOrColoumnStatus","statusCheckColoumn","searchMatrix","len","len1","piviot","searchValue","length","obj","element","CustomTable","props","startTimer","st","t","startTime","difference","Date","getTime","hours","minutes","seconds","getSodukuTime","setState","time","componentDidMount","tInterval","setInterval","handleChange","e","str","newValue","target","test","isNaN","parseInt","indexes","split","newState","state","error","sodukuStatusObject","postions","clearInterval","renderColoums","singleRowObject","j","customClass","rowcouloumn","push","className","type","onChange","onKeyDown","readOnly","chancesRemaining","Fragment","renderTableComponent","component","message","keyCode","this","React","Component","console","log","App","ReactDOM","render","document","getElementById"],"mappings":"uOAAaA,EAAsB,W,OCItBC,EAAe,SAACC,GAC3B,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,KAElCI,EAAY,SAACC,GAIxB,IAHA,IAAMC,EAAS,IAAIC,MAAM,GAAGC,KAAK,GAAGC,KAAI,WACtC,OAAO,IAAIF,MAAM,GAAGC,KAAK,OAElBE,EAAI,EAAGA,GAAKL,EAAWK,IAAK,CACnC,IAAMC,EAAMZ,EAAa,GACnBa,EAAUb,EAAa,GACvBc,EAAQd,EAAa,GAC3BO,EAAOK,GAAKC,GAAWC,GAEG,IADFC,EAAYR,EAAQK,EAAKC,GAClCG,QACgB,KAAzBT,EAAOK,GAAKC,KACdN,EAAOK,GAAKC,GAAW,IAI7B,OAAON,GAGIQ,EAAc,SACzBR,EACAU,EACAC,GAEA,IAAMJ,EAAgBP,EAAOU,GAAkBC,GACzCC,EAAmCC,EACvCH,EACAC,GAEIG,EAA2BF,EAAaP,IACxCU,EAA+BH,EAAaN,QAC5CU,EAAyBC,EAC7BjB,EACAc,EACAC,EACAR,EACAG,EACAC,GAEF,IAAiC,IAA7BK,EAAkBP,OACpB,OAAO,2BAAKO,GAAZ,IAA+BE,WAAW,IAE5C,IAAMC,EAAsBC,EAC1BpB,EACA,MACAO,EACAG,EACAC,GAEF,IAA8B,IAA1BQ,EAAeV,OACjB,OAAO,2BAAKU,GAAZ,IAA4BD,WAAW,IAEzC,IAAMG,EAA0BD,EAC9BpB,EACA,UACAO,EACAG,EACAC,GAGF,OAAkC,IAA9BU,EAAmBZ,OACd,2BAAKY,GAAZ,IAAgCH,WAAW,KAGT,IADFI,EAAatB,EAAQ,IAC9BS,OACd,CAAEA,QAAQ,EAAMS,WAAW,GAE7B,CAAET,QAAQ,EAAMS,WAAW,IAGzBD,EAAmB,SAC9BjB,EACAc,EACAC,EACAR,EACAG,EACAC,GAMA,IAJA,IAAMY,EAAcT,EAAmB,EACjCU,EAAeT,EAAuB,EAExCN,GAAkB,EACbJ,EAAMS,EAAkBT,EAAMkB,EAAKlB,IAC1C,IAAK,IAAIC,EAAUS,EAAsBT,EAAUkB,EAAMlB,IACvD,IAAID,IAAQK,GAAoBJ,IAAYK,IAEjCJ,IAAUP,EAAOK,GAAKC,GAE/B,MAAO,CAAEG,OADTA,GAAS,EACQJ,MAAKC,WAI5B,MAAO,CAAEG,WAGEI,EAAkB,SAC7BH,EACAC,GA4BA,OAzBID,EAAmB,EACjBC,EAAuB,EACV,CAAEN,IAAK,EAAGC,QAAS,GACzBK,EAAuB,GAAKA,EAAuB,EAC7C,CAAEN,IAAK,EAAGC,QAAS,GAEnB,CAAED,IAAK,EAAGC,QAAS,GAE3BI,EAAmB,GAAKA,EAAmB,EAChDC,EAAuB,EACV,CAAEN,IAAK,EAAGC,QAAS,GACzBK,EAAuB,GAAKA,EAAuB,EAC7C,CAAEN,IAAK,EAAGC,QAAS,GAEnB,CAAED,IAAK,EAAGC,QAAS,GAGhCK,EAAuB,EACV,CAAEN,IAAK,EAAGC,QAAS,GACzBK,EAAuB,GAAKA,EAAuB,EAC7C,CAAEN,IAAK,EAAGC,QAAS,GAEnB,CAAED,IAAK,EAAGC,QAAS,IAK3Bc,EAA0B,SACrCpB,GAOA,IAFS,IAJTyB,EAIQ,uDAJS,MACjBC,EAGQ,uCAFRhB,EAEQ,uCADRC,EACQ,uCACJF,GAAkB,EACbL,EAAI,EAAGA,EAAIJ,EAAO2B,OAAQvB,IAAK,CACtC,IAAIG,OAAU,EACd,GAAe,QAAXkB,EAAkB,CACpB,GAAIrB,IAAMO,EACR,SAEFJ,EAAQP,EAAOU,GAAkBN,OAC5B,CACL,GAAIA,IAAMM,EACR,SAEFH,EAAQP,EAAOI,GAAGO,GAEpB,GAAIe,IAAgBnB,EAAO,CAEzB,GADAE,GAAS,EACM,QAAXgB,EAAkB,CACpB,IAAMG,EAAM,CAAEvB,IAAKK,EAAkBJ,QAASF,GAC9C,OAAO,aAAEK,UAAWmB,GAEpB,IAAMA,EAAM,CAAEvB,IAAKD,EAAGE,QAASK,GAC/B,OAAO,aAAEF,UAAWmB,IAI1B,MAAO,CAAEnB,WAmBEa,EAAe,SAACtB,EAAoB6B,GAG/C,IAFA,IAAIpB,GAAkB,EAEbJ,EAAc,EAAGA,EAAML,EAAO2B,OAAQtB,IAE7C,IAAK,IAAIC,EAAkB,EAAGA,EAAUN,EAAOK,GAAKsB,OAAQrB,IAC1D,GAAIN,EAAOK,GAAKC,KAAauB,EAE3B,OADApB,GAAS,EAKf,OAAOA,G,OCnDMqB,E,kDAnIb,WAAYC,GAAa,IAAD,qCACtB,cAAMA,IAUDC,WAAa,SAACC,GACnB,IAAMC,ED8ImB,SAACC,GAC5B,IACIC,EAEJA,GADc,IAAIC,MAAOC,UACEH,EAC3B,IAAII,EAAa5C,KAAKC,MACnBwC,EAAU,MAAX,MAEEI,EAAe7C,KAAKC,MAAOwC,EAAU,KAAX,KAC1BK,EAAe9C,KAAKC,MAAOwC,EAAU,IAAkB,KAK3D,OAJAG,EAAQA,EAAQ,GAAK,IAAMA,EAAQA,GAGC,KAFpCC,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GAEW,KAD1CC,EAAU,GAAK,IAAMA,EAAUA,GC1JrBC,CAAcT,GAChC,EAAKU,SAAS,CAAEC,KAAMV,KAbA,EAejBW,kBAAoB,WACzB,IAAMV,GAAoB,IAAIE,MAAOC,UAC/BQ,EAAiBC,aAAY,kBAAM,EAAKf,WAAWG,KAAY,KACrE,EAAKQ,SAAS,CAAEG,eAlBM,EAgCjBE,aAAe,SACpBC,EACAC,GAEA,IAAMC,EAAmBF,EAAEG,OAAO7C,MAClC,GACe,KAAb4C,KACC3D,EAAY6D,KAAKF,IACI,IAApBA,EAASxB,QACR2B,MAAMC,SAASJ,EAAU,MA4B5B,OAAO,EA1BP,IAAMK,EAAUN,EAAIO,MAAM,IACpBC,EAAQ,YAAO,EAAKC,MAAMpD,OAC1BF,EAAMkD,SAASC,EAAQ,GAAI,IAC3BlD,EAAUiD,SAASC,EAAQ,GAAI,IAIrC,GAHAE,EAASrD,GAAKC,GACC,KAAb6C,EAAkBI,SAASN,EAAEG,OAAO7C,MAAO,IAAM,GACnD,EAAKoC,SAAS,CAAEpC,MAAOmD,IACN,KAAbP,EAEF,OADA,EAAKR,SAAS,CAAEiB,MAAO,MAChB,EAET,IAAMC,EAA0BrD,EAAYkD,EAAUrD,EAAKC,GAC3D,IAAkC,IAA9BuD,EAAmBpD,OAAkB,CACvC,IAAMqD,EACJD,EAAmBxD,IAAM,GAAKwD,EAAmBvD,QACnD,EAAKqC,SAAS,CAAEiB,MAAOE,SAEO,IAA9BD,EAAmBpD,SACc,IAAjCoD,EAAmB3C,WAEnB,EAAKyB,SAAS,CAAEiB,MAAO,KACvBG,cAAc,EAAKJ,MAAMb,YAEzB,EAAKH,SAAS,CAAEiB,MAAO,MAlEL,EAwEjBI,cAAgB,SAACjC,GAEtB,IADA,IAAMkC,EAAyB,GADM,WAE5BC,GACP,IAAMhB,EAAcnB,EAAM3B,EAAI,GAAK8D,EAC7B3D,EAAgB,EAAKoD,MAAMpD,MAAMwB,EAAM3B,GAAG8D,GAE1CC,EAAmB,cAAUpC,EAAM3B,EAAI,IAApB,mBAAkC8D,GAErDE,EADgB,EAAKT,MAAMC,MACPH,MAAM,IAC1BpD,EAAMkD,SAASa,EAAY,GAAI,IAC/B9D,EAAUiD,SAASa,EAAY,GAAI,IACzCH,EAAgBI,KACd,qBAAK,gBAAenB,EAAKoB,UAAWH,EAApC,SACE,uBACEI,KAAK,SACLC,SAAU,SAAAvB,GAAC,OAAI,EAAKD,aAAaC,EAAGC,IACpCuB,UAAW,SAAAxB,GAAC,OAAI,EAAKwB,UAAUxB,IAC/B1C,MAAOA,EACP+D,UAAWjE,IAAQ0B,EAAM3B,GAAKE,IAAY4D,EAAI,MAAQ,GACtDQ,WAAU,EAAKf,MAAMgB,kBAAoB,SAjBxCT,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAsBT,OAAO,cAAC,IAAMU,SAAP,UAAiBX,KAhGF,EAkGjBY,qBAAuB,WAE5B,IADA,IAAMC,EAAmB,GAChB1E,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMC,EAAM,GACZA,EAAIgE,KACF,qBAAKC,UAAU,uBAAf,SACE,cAAC,EAAKN,cAAN,CAAoB5D,EAAGA,OAG3B0E,EAAUT,KAAKhE,GAEjB,OACE,cAAC,IAAMuE,SAAP,UACE,sBAAMN,UAAU,KAAhB,SAAsBQ,OA7G1B,EAAKnB,MAAQ,CACXgB,iBFjByB,EEkBzBf,MAAO,GACPmB,QAAS,UACTjC,UAAW,EACXF,KAAM,WACNrC,MAAOT,EAAU,KARG,E,6CAoBxB,SAAiBmD,GACf,GAAkB,IAAdA,EAAE+B,SAAiBC,KAAKtB,MAAMgB,kBAAoB,EAAG,CACvD,IAAMA,EAA2BM,KAAKtB,MAAMgB,iBAAmB,EACtC,KAArBM,KAAKtB,MAAMC,QACTe,EAAmB,IACrBM,KAAKtC,SAAS,CAAEoC,QAAS,cACzBhB,cAAckB,KAAKtB,MAAMb,YAE3BmC,KAAKtC,SAAS,CAAEgC,yB,oBAuFtB,WACE,OACE,gCACE,qBAAKL,UAAU,gBAAf,SACE,mBAAMO,qBAAN,MAEF,0CAAaI,KAAKtB,MAAMf,QACxB,sDACsB,IACnBqC,KAAKtB,MAAMgB,kBAAoB,EAAIM,KAAKtB,MAAMgB,iBAAmB,KAEpE,4CAAeM,KAAKtB,MAAMoB,kB,GAzIRG,IAAMC,WCQhCC,QAAQC,IAAI,QACZD,QAAQC,IAAI,QACZD,QAAQC,IAAI,QACZD,QAAQC,IAAI,QACGC,MAXO,WACpB,OACE,qBAAKhB,UAAU,MAAf,SACE,cAAC,EAAD,OCHNiB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.80ad9e81.chunk.js","sourcesContent":["export const TEST_STRING: RegExp = /^[0-8]+$/;\nexport const CHANCES: number = 3;\n","interface InitialIndexObject {\n  row: number;\n  coloumn: number;\n}\nexport const getRandomInt = (max: number): number => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\nexport const randomise = (frequency: number): any[][] => {\n  const matrix = new Array(9).fill(0).map(() => {\n    return new Array(9).fill('');\n  });\n  for (let i = 1; i <= frequency; i++) {\n    const row = getRandomInt(8);\n    const coloumn = getRandomInt(8);\n    const value = getRandomInt(8);\n    matrix[row][coloumn] = value;\n    const checkState: any = sodukuState(matrix, row, coloumn);\n    if (checkState.status === false) {\n      if (matrix[row][coloumn] !== '') {\n        matrix[row][coloumn] = '';\n      }\n    }\n  }\n  return matrix;\n};\n\nexport const sodukuState = (\n  matrix: number[][],\n  insertedIndexRow: number,\n  insertedIndexColoumn: number,\n): any => {\n  const value: number = matrix[insertedIndexRow][insertedIndexColoumn];\n  const initialIndex: InitialIndexObject = getInitialIndex(\n    insertedIndexRow,\n    insertedIndexColoumn,\n  );\n  const startingIndexRow: number = initialIndex.row;\n  const startingIndexColoumn: number = initialIndex.coloumn;\n  const statusSmallerGrid: any = checkSmallerGrid(\n    matrix,\n    startingIndexRow,\n    startingIndexColoumn,\n    value,\n    insertedIndexRow,\n    insertedIndexColoumn,\n  );\n  if (statusSmallerGrid.status === false) {\n    return { ...statusSmallerGrid, completed: false };\n  }\n  const statusCheckRow: any = checkRowOrColoumnStatus(\n    matrix,\n    'row',\n    value,\n    insertedIndexRow,\n    insertedIndexColoumn,\n  );\n  if (statusCheckRow.status === false) {\n    return { ...statusCheckRow, completed: false };\n  }\n  const statusCheckColoumn: any = checkRowOrColoumnStatus(\n    matrix,\n    'coloumn',\n    value,\n    insertedIndexRow,\n    insertedIndexColoumn,\n  );\n\n  if (statusCheckColoumn.status === false) {\n    return { ...statusCheckColoumn, completed: false };\n  } else {\n    const statusSearchMatrix: any = searchMatrix(matrix, '');\n    if (statusSearchMatrix.status === false) {\n      return { status: true, completed: true };\n    }\n    return { status: true, completed: false };\n  }\n};\nexport const checkSmallerGrid = (\n  matrix: number[][],\n  startingIndexRow: number,\n  startingIndexColoumn: number,\n  value: number,\n  insertedIndexRow: number,\n  insertedIndexColoumn: number,\n) => {\n  const len: number = startingIndexRow + 3;\n  const len1: number = startingIndexColoumn + 3;\n\n  let status: boolean = true;\n  for (let row = startingIndexRow; row < len; row++) {\n    for (let coloumn = startingIndexColoumn; coloumn < len1; coloumn++) {\n      if (row === insertedIndexRow && coloumn === insertedIndexColoumn) {\n        continue;\n      } else if (value === matrix[row][coloumn]) {\n        status = false;\n        return { status, row, coloumn };\n      }\n    }\n  }\n  return { status };\n};\n\nexport const getInitialIndex = (\n  insertedIndexRow: number,\n  insertedIndexColoumn: number,\n): InitialIndexObject => {\n  let initialIndex: InitialIndexObject;\n  if (insertedIndexRow < 3) {\n    if (insertedIndexColoumn < 3) {\n      initialIndex = { row: 0, coloumn: 0 };\n    } else if (insertedIndexColoumn > 2 && insertedIndexColoumn < 6) {\n      initialIndex = { row: 0, coloumn: 3 };\n    } else {\n      initialIndex = { row: 0, coloumn: 6 };\n    }\n  } else if (insertedIndexRow > 2 && insertedIndexRow < 6) {\n    if (insertedIndexColoumn < 3) {\n      initialIndex = { row: 3, coloumn: 0 };\n    } else if (insertedIndexColoumn > 2 && insertedIndexColoumn < 6) {\n      initialIndex = { row: 3, coloumn: 3 };\n    } else {\n      initialIndex = { row: 3, coloumn: 6 };\n    }\n  } else {\n    if (insertedIndexColoumn < 3) {\n      initialIndex = { row: 6, coloumn: 0 };\n    } else if (insertedIndexColoumn > 2 && insertedIndexColoumn < 6) {\n      initialIndex = { row: 6, coloumn: 3 };\n    } else {\n      initialIndex = { row: 6, coloumn: 6 };\n    }\n  }\n  return initialIndex;\n};\nexport const checkRowOrColoumnStatus = (\n  matrix: number[][],\n  piviot: string = 'row',\n  searchValue: number,\n  insertedIndexRow: number,\n  insertedIndexColoumn: number,\n): any => {\n  let status: boolean = true;\n  for (let i = 0; i < matrix.length; i++) {\n    let value: any;\n    if (piviot === 'row') {\n      if (i === insertedIndexColoumn) {\n        continue;\n      }\n      value = matrix[insertedIndexRow][i];\n    } else {\n      if (i === insertedIndexRow) {\n        continue;\n      }\n      value = matrix[i][insertedIndexColoumn];\n    }\n    if (searchValue === value) {\n      status = false;\n      if (piviot === 'row') {\n        const obj = { row: insertedIndexRow, coloumn: i };\n        return { status, ...obj };\n      } else {\n        const obj = { row: i, coloumn: insertedIndexColoumn };\n        return { status, ...obj };\n      }\n    }\n  }\n  return { status };\n};\n// sodukuState([[1, 2], [2, 8]]);\nexport const getSodukuTime = (startTime: number): string => {\n  let updatedTime: number;\n  let difference: number;\n  updatedTime = new Date().getTime();\n  difference = updatedTime - startTime;\n  let hours: any = Math.floor(\n    (difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),\n  );\n  let minutes: any = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n  let seconds: any = Math.floor((difference % (1000 * 60)) / 1000);\n  hours = hours < 10 ? '0' + hours : hours;\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  seconds = seconds < 10 ? '0' + seconds : seconds;\n  const displayTime: string = hours + ':' + minutes + ':' + seconds;\n  return displayTime;\n};\nexport const searchMatrix = (matrix: number[][], element: any) => {\n  let status: boolean = false;\n  // tslint:disable-next-line:prefer-for-of\n  for (let row: number = 0; row < matrix.length; row++) {\n    // tslint:disable-next-line:prefer-for-of\n    for (let coloumn: number = 0; coloumn < matrix[row].length; coloumn++) {\n      if (matrix[row][coloumn] === element) {\n        status = true;\n        return status;\n      }\n    }\n  }\n  return status;\n};\n","import React from 'react';\nimport { CHANCES, TEST_STRING } from './../utilities/constants';\nimport { getSodukuTime, randomise, sodukuState } from './../utilities/helper';\n\nclass CustomTable extends React.Component<\n  any,\n  {\n    value: any[][];\n    error: string;\n    time: string;\n    message: string;\n    chancesRemaining: number;\n    tInterval: number;\n  }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      chancesRemaining: CHANCES,\n      error: '',\n      message: 'playing',\n      tInterval: 0,\n      time: '00:00:00',\n      value: randomise(40),\n    };\n  }\n  public startTimer = (st: number) => {\n    const t: string = getSodukuTime(st);\n    this.setState({ time: t });\n  };\n  public componentDidMount = () => {\n    const startTime: number = new Date().getTime();\n    const tInterval: any = setInterval(() => this.startTimer(startTime), 1000);\n    this.setState({ tInterval });\n  };\n  public onKeyDown(e: any) {\n    if (e.keyCode === 8 && this.state.chancesRemaining >= 0) {\n      const chancesRemaining: number = this.state.chancesRemaining - 1;\n      if (this.state.error !== '') {\n        if (chancesRemaining < 0) {\n          this.setState({ message: 'Game Over' });\n          clearInterval(this.state.tInterval);\n        }\n        this.setState({ chancesRemaining });\n      }\n    }\n  }\n  public handleChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    str: string,\n  ) => {\n    const newValue: string = e.target.value;\n    if (\n      newValue === '' ||\n      (TEST_STRING.test(newValue) &&\n        newValue.length === 1 &&\n        !isNaN(parseInt(newValue, 10)))\n    ) {\n      const indexes = str.split('');\n      const newState = [...this.state.value];\n      const row = parseInt(indexes[0], 10);\n      const coloumn = parseInt(indexes[1], 10);\n      newState[row][coloumn] =\n        newValue !== '' ? parseInt(e.target.value, 10) : '';\n      this.setState({ value: newState });\n      if (newValue === '') {\n        this.setState({ error: '' });\n        return false;\n      }\n      const sodukuStatusObject: any = sodukuState(newState, row, coloumn);\n      if (sodukuStatusObject.status === false) {\n        const postions =\n          sodukuStatusObject.row + '' + sodukuStatusObject.coloumn;\n        this.setState({ error: postions });\n      } else if (\n        sodukuStatusObject.status === false &&\n        sodukuStatusObject.completed === true\n      ) {\n        this.setState({ error: '' });\n        clearInterval(this.state.tInterval);\n      } else {\n        this.setState({ error: '' });\n      }\n    } else {\n      return false;\n    }\n  };\n  public renderColoums = (props: any) => {\n    const singleRowObject: any[] = [];\n    for (let j = 0; j < 9; j++) {\n      const str: string = props.i + '' + j;\n      const value: number = this.state.value[props.i][j];\n      // const customClass: string = 'Row-' + props.i + ' ' + 'Coloumn-' + j;\n      const customClass: string = `Row-${props.i}${' '}Coloumn-${j}`;\n      const error: string = this.state.error;\n      const rowcouloumn = error.split('');\n      const row = parseInt(rowcouloumn[0], 10);\n      const coloumn = parseInt(rowcouloumn[1], 10);\n      singleRowObject.push(\n        <div data-position={str} className={customClass}>\n          <input\n            type=\"string\"\n            onChange={e => this.handleChange(e, str)}\n            onKeyDown={e => this.onKeyDown(e)}\n            value={value}\n            className={row === props.i && coloumn === j ? 'Red' : ''}\n            readOnly={this.state.chancesRemaining >= 0 ? false : true}\n          />\n        </div>,\n      );\n    }\n    return <React.Fragment>{singleRowObject}</React.Fragment>;\n  };\n  public renderTableComponent = (): any => {\n    const component: any[] = [];\n    for (let i = 0; i < 9; i++) {\n      const row = [];\n      row.push(\n        <div className=\"FlexColoumnContainer\">\n          <this.renderColoums i={i} />\n        </div>,\n      );\n      component.push(row);\n    }\n    return (\n      <React.Fragment>\n        <span className=\"sp\">{component}</span>\n      </React.Fragment>\n    );\n  };\n  public render() {\n    return (\n      <div>\n        <div className=\"MainContainer\">\n          <this.renderTableComponent />\n        </div>\n        <div>TIme : {this.state.time}</div>\n        <div>\n          Chances remaining :{' '}\n          {this.state.chancesRemaining >= 0 ? this.state.chancesRemaining : 0}\n        </div>\n        <div>Status : {this.state.message}</div>\n      </div>\n    );\n  }\n}\nexport default CustomTable;\n","import React from 'react';\nimport './App.css';\n\nimport CustomTable from './components/Table';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <CustomTable />\n    </div>\n  );\n};\nconsole.log(\"Test\")\nconsole.log(\"Test\")\nconsole.log(\"Test\")\nconsole.log(\"Test\")\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}